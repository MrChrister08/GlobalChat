{
  "rules": {
    ".read": "auth != null",
    ".write": "auth != null",
    "messages": {
      ".indexOn": ["timestamp"],
      "$messageId": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === data.child('userId').val()",
        ".validate": "newData.hasChildren(['username', 'text', 'timestamp', 'userId']) && newData.child('text').isString() && newData.child('text').val().length > 0 && newData.child('text').val().length <= 1000 && newData.child('username').isString() && newData.child('username').val().length > 0 && newData.child('username').val().length <= 50 && newData.child('timestamp').isNumber() && newData.child('userId').isString() && newData.child('userId').val() === auth.uid"
      }
    },
    "users": {
      ".read": "auth != null",
      ".write": "auth != null",
      ".indexOn": ["username"],
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid",
        ".validate": "newData.hasChildren(['username', 'email']) && newData.child('username').isString() && newData.child('username').val().length >= 3 && newData.child('username').val().length <= 30 && newData.child('email').isString() && newData.child('email').val().matches(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$/)"
      }
    },
    "rateLimits": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.uid === $uid",
        ".validate": "newData.hasChildren(['lastMessageTime']) && newData.child('lastMessageTime').isNumber()"
      }
    }
  }
}